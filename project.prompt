Directory Structure:
src/
    App.css
    App.jsx
    index.jsx
    auth/
        FetchInterceptor.js
    components/
        Dashboard.jsx
        Login.jsx
    configs/
        AppConfig.js
    constants/
        AuthConstant.js
    services/
        authService.js
        UserService.js
    store/
        index.js
        slices/
            authSlice.js
    utils/
        encryption.js
    views/
        Home.jsx
        Profile.jsx
        Roles.jsx
        Settings.jsx
        Users.jsx

// src\App.css
/* MUI handles all the styling */

// src\App.jsx
import { CssBaseline, ThemeProvider, createTheme } from '@mui/material';
import { BrowserRouter, Routes, Route, Navigate } from 'react-router-dom';
import { useSelector, useDispatch } from 'react-redux';
import { logout } from './store/slices/authSlice';

import Login from './components/Login';
import Dashboard from './components/Dashboard';

const theme = createTheme({
  palette: {
    mode: 'light'
  }
});

export default function App() {
  const dispatch = useDispatch();
  const token = useSelector((state) => state.auth.token);

  const handleLogout = () => {
    dispatch(logout());
  };

  return (
    <ThemeProvider theme={theme}>
      <CssBaseline />
      <BrowserRouter>
        <Routes>
          <Route
            path="/"
            element={
              token
                ? <Navigate to="/dashboard" />
                : <Login />
            }
          />
          <Route
            path="/dashboard"
            element={
              token
                ? <Dashboard onLogout={handleLogout} />
                : <Navigate to="/" />
            }
          />
        </Routes>
      </BrowserRouter>
    </ThemeProvider>
  );
}


// src\index.jsx
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import { Provider } from 'react-redux';
import store from './store';

ReactDOM.createRoot(document.getElementById('root')).render(
  <Provider store={store}>
    <App />
  </Provider>
);


// src\auth\FetchInterceptor.js
import axios from 'axios';
import { API_BASE_URL } from 'configs/AppConfig';
import { signOutSuccess } from 'store/slices/authSlice';
import store from '../store';
import { AUTH_TOKEN, TOKEN_PAYLOAD_KEY, REQUEST_TIMEOUT } from 'constants/AuthConstant';

const unauthorizedCode = [400, 401, 403]

const service = axios.create({
  baseURL: API_BASE_URL,
  timeout: REQUEST_TIMEOUT
})


service.interceptors.request.use(config => {
	const jwtToken = localStorage.getItem(AUTH_TOKEN) || null;
	
	if (jwtToken) {
		config.headers[TOKEN_PAYLOAD_KEY] = jwtToken
	}

  	return config
}, error => {
	return Promise.reject(error)
})


service.interceptors.response.use((response) => {
	return response.data
}, (error) => {

	if (unauthorizedCode.includes(error.response.status)) {
		localStorage.removeItem(AUTH_TOKEN)
		store.dispatch(signOutSuccess())
	}

	return Promise.reject(error);
});

export default service

// src\components\Dashboard.jsx
import { useState } from 'react';
import {
  Box,
  AppBar,
  Toolbar,
  IconButton,
  Typography,
  Drawer,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button
} from '@mui/material';
import MenuIcon from '@mui/icons-material/Menu';
import HomeIcon from '@mui/icons-material/Home';
import PersonIcon from '@mui/icons-material/Person';
import SettingsIcon from '@mui/icons-material/Settings';
import LogoutIcon from '@mui/icons-material/Logout';
import GroupIcon from '@mui/icons-material/Group';
import SecurityIcon from '@mui/icons-material/Security';

import Home from '../views/Home';
import Profile from '../views/Profile';
import Settings from '../views/Settings';
import Users from '../views/Users';
import Roles from '../views/Roles';

const drawerWidth = 240;

export default function Dashboard({ onLogout }) {
  const [sidebarOpen, setSidebarOpen] = useState(true);
  const [selectedMenu, setSelectedMenu] = useState('Home');
  const [logoutDialogOpen, setLogoutDialogOpen] = useState(false);

  const toggleDrawer = () => {
    setSidebarOpen(!sidebarOpen);
  };

  const handleLogoutClick = () => {
    setLogoutDialogOpen(true);
  };

  const handleLogoutConfirm = () => {
    setLogoutDialogOpen(false);
    onLogout();
  };

  const handleLogoutCancel = () => {
    setLogoutDialogOpen(false);
  };

  const menuItems = [
    { text: 'Home', icon: <HomeIcon /> },
    { text: 'Users', icon: <GroupIcon /> },
    { text: 'Roles', icon: <SecurityIcon /> },
    { text: 'Profile', icon: <PersonIcon /> },
    { text: 'Settings', icon: <SettingsIcon /> }
  ];

  const views = {
    Home: <Home />,
    Users: <Users />,
    Roles: <Roles />,
    Profile: <Profile />,
    Settings: <Settings />
  };

  return (
    <Box sx={{ display: 'flex' }}>
      <AppBar position="fixed" sx={{ zIndex: (theme) => theme.zIndex.drawer + 1 }}>
        <Toolbar>
          <IconButton
            color="inherit"
            onClick={toggleDrawer}
            edge="start"
            sx={{ marginRight: 2 }}
          >
            <MenuIcon />
          </IconButton>
          <Typography variant="h6" noWrap component="div">
            Dashboard
          </Typography>
        </Toolbar>
      </AppBar>

      <Drawer
        variant="permanent"
        open={sidebarOpen}
        sx={{
          width: sidebarOpen ? drawerWidth : 64,
          flexShrink: 0,
          '& .MuiDrawer-paper': {
            width: sidebarOpen ? drawerWidth : 64,
            boxSizing: 'border-box',
            whiteSpace: 'nowrap',
            overflowX: 'hidden',
            transition: 'width 0.2s'
          }
        }}
      >
        <Toolbar />
        <Box sx={{ overflow: 'hidden' }}>
          <List>
            {menuItems.map((item) => (
              <ListItem
                button
                key={item.text}
                selected={selectedMenu === item.text}
                onClick={() => setSelectedMenu(item.text)}
              >
                <ListItemIcon>{item.icon}</ListItemIcon>
                <ListItemText primary={item.text} sx={{ opacity: sidebarOpen ? 1 : 0 }} />
              </ListItem>
            ))}
            <ListItem button onClick={handleLogoutClick}>
              <ListItemIcon><LogoutIcon /></ListItemIcon>
              <ListItemText primary="Logout" sx={{ opacity: sidebarOpen ? 1 : 0 }} />
            </ListItem>
          </List>
        </Box>
      </Drawer>

      <Box component="main" sx={{ flexGrow: 1, p: 3 }}>
        <Toolbar />
        {views[selectedMenu] || <Typography paragraph>Select an option from the menu.</Typography>}
      </Box>

      <Dialog open={logoutDialogOpen} onClose={handleLogoutCancel}>
        <DialogTitle>Confirm Logout</DialogTitle>
        <DialogContent>
          <Typography>Are you sure you want to log out?</Typography>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleLogoutCancel}>Cancel</Button>
          <Button onClick={handleLogoutConfirm} color="primary" variant="contained">
            Confirm
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
}


// src\components\Login.jsx
import { useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { Box, Paper, TextField, Button, Typography } from '@mui/material';
import { login } from '../store/slices/authSlice';
import { useNavigate } from 'react-router-dom';
import { encryptWithPublicKey } from '../utils/encryption';

export default function Login() {
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const { loading, error, token } = useSelector((state) => state.auth);

  const [formData, setFormData] = useState({
    username: '',
    password: ''
  });

  const handleSubmit = async (e) => {
    e.preventDefault();

    try {
      const encryptedPassword = await encryptWithPublicKey(formData.password);
      const encryptedFormData = {
        username: formData.username,
        password: encryptedPassword
      };

      dispatch(login(encryptedFormData)).then((result) => {
        if (result.meta.requestStatus === 'fulfilled') {
          navigate('/dashboard');
        }
      });
    } catch (err) {
      console.error('Encryption failed:', err);
    }
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  return (
    <Box sx={{ height: '100vh', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
      <Paper elevation={3} sx={{ p: 4, width: '100%', maxWidth: 400 }}>
        <Typography variant="h5" textAlign="center" mb={3}>
          Login
        </Typography>
        <form onSubmit={handleSubmit}>
          <TextField
            fullWidth
            name="username"
            label="Username"
            value={formData.username}
            onChange={handleChange}
            sx={{ mb: 2 }}
          />
          <TextField
            fullWidth
            name="password"
            type="password"
            label="Password"
            value={formData.password}
            onChange={handleChange}
            sx={{ mb: 2 }}
          />
          {error && <Typography color="error" mb={2}>{error}</Typography>}
          <Button type="submit" variant="contained" fullWidth size="large" disabled={loading}>
            {loading ? 'Logging in...' : 'Login'}
          </Button>
        </form>
      </Paper>
    </Box>
  );
}

// src\configs\AppConfig.js
export const API_BASE_URL = import.meta.env.VITE_API_BASE_URL;
export const PUBLIC_KEY_BASE64 = import.meta.env.VITE_PUBLIC_KEY_BASE64;


// src\constants\AuthConstant.js
export const AUTH_TOKEN = 'auth_token'
export const TOKEN_PAYLOAD_KEY = 'authorization'
export const REQUEST_TIMEOUT = 60000

// src\services\authService.js
import { API_BASE_URL } from '../configs/AppConfig';

const authService = {
  login: async ({ username, password }) => {
    const response = await fetch(`${API_BASE_URL}/login`, {
      method: 'POST',
      headers: {
        'accept': 'application/json',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ username, password })
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || 'Login failed');
    }

    const data = await response.json();
    return data.AuthenticationResult.AccessToken;
  }
};

export default authService;


// src\services\UserService.js
import fetch from '../auth/FetchInterceptor';

const UserService = {}

UserService.create = function (data) {
	return fetch({
		url: '/user',
		method: 'post',
		data: data
	})
}

export default UserService;

// src\store\index.js
import { configureStore } from '@reduxjs/toolkit';
import authReducer from './slices/authSlice';

const store = configureStore({
  reducer: {
    auth: authReducer
  }
});

export default store;


// src\store\slices\authSlice.js
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import authService from '../../services/authService';

const tokenFromStorage = localStorage.getItem('AUTH_TOKEN') || null;

const initialState = {
  token: tokenFromStorage,
  loading: false,
  error: null
};

export const login = createAsyncThunk('auth/login', async (credentials, { rejectWithValue }) => {
  try {
    const token = await authService.login(credentials);
    localStorage.setItem('AUTH_TOKEN', token);
    return token;
  } catch (err) {
    return rejectWithValue(err.message || 'Login failed');
  }
});

const authSlice = createSlice({
  name: 'auth',
  initialState,
  reducers: {
    logout: (state) => {
      localStorage.removeItem('AUTH_TOKEN');
      state.token = null;
    }
  },
  extraReducers: (builder) => {
    builder
      .addCase(login.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(login.fulfilled, (state, action) => {
        state.loading = false;
        state.token = action.payload;
      })
      .addCase(login.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload;
      });
  }
});

export const { logout } = authSlice.actions;
export default authSlice.reducer;

// src\utils\encryption.js
import { PUBLIC_KEY_BASE64 } from '../configs/AppConfig';

export async function encryptWithPublicKey(message) {
  const binaryDer = Uint8Array.from(atob(PUBLIC_KEY_BASE64), c => c.charCodeAt(0));

  const publicKey = await window.crypto.subtle.importKey(
    "spki",
    binaryDer.buffer,
    {
      name: "RSA-OAEP",
      hash: "SHA-256"
    },
    false,
    ["encrypt"]
  );

  const encoded = new TextEncoder().encode(message);
  const ciphertext = await window.crypto.subtle.encrypt({ name: "RSA-OAEP" }, publicKey, encoded);
  return btoa(String.fromCharCode(...new Uint8Array(ciphertext)));
}


// src\views\Home.jsx
import { Typography } from '@mui/material';

export default function Home() {
  return <Typography paragraph>Welcome to the Home section!</Typography>;
}


// src\views\Profile.jsx
import { Typography } from '@mui/material';

export default function Profile() {
  return <Typography paragraph>This is your Profile page.</Typography>;
}


// src\views\Roles.jsx
import { useState } from 'react';
import {
  Box,
  Typography,
  Button,
  IconButton,
} from '@mui/material';
import { DataGrid } from '@mui/x-data-grid';
import FilterListIcon from '@mui/icons-material/FilterList';
import SortIcon from '@mui/icons-material/Sort';
import MoreVertIcon from '@mui/icons-material/MoreVert';

export default function Roles() {
  const [roles] = useState([
    { id: 1, name: 'Global Administrator', description: 'Total system access and configuration.' },
    { id: 2, name: 'Content Manager', description: 'Manages content creation and publishing.' },
    { id: 3, name: 'News Editor', description: 'Edits and publishes articles in the news section.' },
    { id: 4, name: 'Data Analyst', description: 'Accesses reports and performance metrics.' },
    { id: 5, name: 'Technical Support', description: 'Resolves incidents and assists users.' },
    { id: 6, name: 'Security Reviewer', description: 'Audits and ensures system integrity.' },
    { id: 7, name: 'Backend Developer', description: 'Manages server logic and database.' },
    { id: 8, name: 'UI/UX Designer', description: 'Designs interfaces and user experience.' },
  ]);

  const columns = [
    { 
      field: 'name', 
      headerName: 'Role Name',
      flex: 1,
      minWidth: 200 
    },
    { 
      field: 'description', 
      headerName: 'Description',
      flex: 2,
      minWidth: 300
    },
    {
      field: 'actions',
      headerName: 'Actions',
      width: 100,
      sortable: false,
      renderCell: () => (
        <IconButton size="small">
          <MoreVertIcon />
        </IconButton>
      ),
    },
  ];

  return (
    <Box>
      <Typography variant="h5" gutterBottom>Role Management</Typography>
      
      <Box sx={{ display: 'flex', justifyContent: 'flex-end', mb: 2 }}>
        <Button
          startIcon={<FilterListIcon />}
          variant="outlined"
          sx={{ mr: 1 }}
        >
          Filter
        </Button>
        <Button
          startIcon={<SortIcon />}
          variant="outlined"
          sx={{ mr: 1 }}
        >
          Sort
        </Button>
        <Button
          variant="contained"
          color="primary"
        >
          + Add Role
        </Button>
      </Box>

      <DataGrid
        rows={roles}
        columns={columns}
        pageSize={8}
        rowsPerPageOptions={[8, 16, 24]}
        checkboxSelection
        disableSelectionOnClick
        autoHeight
        sx={{
          '& .MuiDataGrid-cell': {
            borderBottom: '1px solid #f0f0f0'
          },
          '& .MuiDataGrid-columnHeaders': {
            backgroundColor: '#fafafa'
          }
        }}
      />
    </Box>
  );
}

// src\views\Settings.jsx
import { Typography } from '@mui/material';

export default function Settings() {
  return <Typography paragraph>Settings can be configured here.</Typography>;
}


// src\views\Users.jsx
import { useState } from 'react';
import {
  Typography,
  Box,
  Card,
  Button,
  Chip,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem
} from '@mui/material';

import { DataGrid } from '@mui/x-data-grid';
import PersonIcon from '@mui/icons-material/Person';
import GroupIcon from '@mui/icons-material/Group';
import SupervisorAccountIcon from '@mui/icons-material/SupervisorAccount';
import NewReleasesIcon from '@mui/icons-material/NewReleases';
import UserService from '../services/UserService';

export default function Users() {
  const [users] = useState([
    { id: 'USR001', name: 'Alice Johnson', username: 'alice.j', email: 'alice.j@example.com', phone: '555-1234', role: 'Admin', status: 'Active' },
    { id: 'USR002', name: 'Bob Smith', username: 'bob.s', email: 'bob.s@example.com', phone: '555-5678', role: 'Viewer', status: 'Active' },
    { id: 'USR003', name: 'Charlie Brown', username: 'charlie.b', email: 'charlie.b@example.com', phone: '555-9012', role: 'Viewer', status: 'Inactive' },
    // ... more users
  ]);
  const [openModal, setOpenModal] = useState(false);
  const [newUser, setNewUser] = useState({
    name: '',
    username: '',
    email: '',
    phone: '',
    password: '',
    role: 'Viewer',
    status: 'Active'
  });

  const handleOpenModal = () => setOpenModal(true);
  const handleCloseModal = () => {
    setOpenModal(false);
    setNewUser({
      name: '',
      username: '',
      email: '',
      phone: '',
      password: '',
      role: 'Viewer',
      status: 'Active'
    });
  };

  const handleInputChange = (event) => {
    const { name, value } = event.target;
    setNewUser(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSubmit = async () => {
    try {
      await UserService.create(newUser);
      handleCloseModal();
    } catch (error) {
      console.error('Error al crear usuario:', error);
    }
  };

  const stats = [
    { title: 'Total Users', value: 10, icon: <GroupIcon />, color: '#1976d2' },
    { title: 'Active Users', value: 6, icon: <PersonIcon />, color: '#2e7d32' },
    { title: 'New Today', value: 2, icon: <NewReleasesIcon />, color: '#ed6c02' },
    { title: 'Administrators', value: 4, icon: <SupervisorAccountIcon />, color: '#d32f2f' }
  ];

  const columns = [
    { field: 'id', headerName: 'ID', width: 90 },
    { field: 'name', headerName: 'Name', width: 180 },
    { field: 'username', headerName: 'Username', width: 130 },
    { field: 'email', headerName: 'Email', width: 200 },
    { field: 'phone', headerName: 'Phone', width: 130 },
    {
      field: 'role',
      headerName: 'Role',
      width: 120,
      renderCell: (params) => (
        <Chip
          label={params.value}
          color={params.value === 'Admin' ? 'primary' : 'default'}
          size="small"
        />
      ),
    },
    {
      field: 'status',
      headerName: 'Status',
      width: 120,
      renderCell: (params) => (
        <Chip
          label={params.value}
          color={params.value === 'Active' ? 'success' : 'default'}
          size="small"
        />
      ),
    },
  ];

  return (
    <Box>
      <Typography variant="h5" gutterBottom>User Management</Typography>
      
      {/* Statistics */}
      <Box sx={{ display: 'flex', gap: 3, mb: 4 }}>
        {stats.map((stat, index) => (
          <Card key={index} sx={{ flex: 1, p: 2 }}>
            <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
              <Box sx={{ 
                backgroundColor: `${stat.color}15`,
                borderRadius: '50%',
                p: 1,
                mr: 2,
                display: 'flex'
              }}>
                {stat.icon}
              </Box>
              <Typography variant="h4">{stat.value}</Typography>
            </Box>
            <Typography color="textSecondary" variant="body2">{stat.title}</Typography>
          </Card>
        ))}
      </Box>

      {/* Users Table */}
      <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>
        <Typography variant="h6">Users List</Typography>
        <Box>
          <Button variant="outlined" sx={{ mr: 1 }}>Filter</Button>
          <Button variant="outlined" sx={{ mr: 1 }}>Export</Button>
          <Button variant="contained" onClick={handleOpenModal}>+ Add User</Button>
        </Box>
      </Box>

      <Box sx={{ height: 400, width: '100%' }}>
        <DataGrid
          rows={users}
          columns={columns}
          pageSize={5}
          rowsPerPageOptions={[5, 10, 20]}
          checkboxSelection
          disableSelectionOnClick
        />
      </Box>

      <Dialog 
        open={openModal} 
        onClose={handleCloseModal}
        PaperProps={{
          sx: { width: '500px' }
        }}
      >
        <DialogTitle>Add New User</DialogTitle>
        <DialogContent>
          <Box sx={{ pt: 2, display: 'flex', flexDirection: 'column', gap: 2 }}>
            <TextField
              name="name"
              label="Name"
              fullWidth
              value={newUser.name}
              onChange={handleInputChange}
            />
            <TextField
              name="username"
              label="Username"
              fullWidth
              value={newUser.username}
              onChange={handleInputChange}
            />
            <TextField
              name="password"
              label="Password"
              type="password"
              fullWidth
              value={newUser.password}
              onChange={handleInputChange}
            />
            <TextField
              name="email"
              label="Email"
              type="email"
              fullWidth
              value={newUser.email}
              onChange={handleInputChange}
            />
            <TextField
              name="phone"
              label="Phone"
              fullWidth
              value={newUser.phone}
              onChange={handleInputChange}
            />
            <FormControl fullWidth>
              <InputLabel>Role</InputLabel>
              <Select
                name="role"
                value={newUser.role}
                label="Role"
                onChange={handleInputChange}
              >
                <MenuItem value="Admin">Admin</MenuItem>
                <MenuItem value="Viewer">Viewer</MenuItem>
              </Select>
            </FormControl>
            <FormControl fullWidth>
              <InputLabel>Status</InputLabel>
              <Select
                name="status"
                value={newUser.status}
                label="Status"
                onChange={handleInputChange}
              >
                <MenuItem value="Active">Active</MenuItem>
                <MenuItem value="Inactive">Inactive</MenuItem>
              </Select>
            </FormControl>
          </Box>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCloseModal}>Cancel</Button>
          <Button onClick={handleSubmit} variant="contained">Save</Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
}


